{"version":3,"file":"static/js/3780.4d222b83.chunk.js","mappings":"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","sources":["terminal/Terminal.tsx","terminal/i18n.ts","terminal/actions.ts","terminal/translations|lazy-once|/^/.//.*/.json$/|chunkName: i18n_cu8cqv-i18n|groupOptions: {}|namespace object"],"sourcesContent":["// SPDX-License-Identifier: MIT\n// Copyright (c) 2020-2023 The Pybricks Authors\n\nimport 'xterm/css/xterm.css';\nimport './terminal.scss';\nimport {\n    ContextMenu,\n    Menu,\n    MenuDivider,\n    MenuItem,\n    ResizeSensor,\n} from '@blueprintjs/core';\nimport { Blank, Clipboard, Duplicate, Trash } from '@blueprintjs/icons';\nimport React, { useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useTernaryDarkMode } from 'usehooks-ts';\nimport { Terminal as XTerm } from 'xterm';\nimport { FitAddon } from 'xterm-addon-fit';\nimport { isMacOS } from '../utils/os';\nimport { TerminalContext } from './TerminalContext';\nimport { receiveData } from './actions';\nimport { useI18n } from './i18n';\n\n// Source: https://freesound.org/people/altemark/sounds/45759/\n// This sound is released under the Creative Commons Attribution 3.0 Unported\n// (CC BY 3.0) license. It was created by 'altemark'. No modifications have been\n// made, apart from the conversion to base64.\nconst BELL_SOUND =\n    'data:audio/mp3;base64,SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU4LjMyLjEwNAAAAAAAAAAAAAAA//tQxAADB8AhSmxhIIEVCSiJrDCQBTcu3UrAIwUdkRgQbFAZC1CQEwTJ9mjRvBA4UOLD8nKVOWfh+UlK3z/177OXrfOdKl7pyn3Xf//WreyTRUoAWgBgkOAGbZHBgG1OF6zM82DWbZaUmMBptgQhGjsyYqc9ae9XFz280948NMBWInljyzsNRFLPWdnZGWrddDsjK1unuSrVN9jJsK8KuQtQCtMBjCEtImISdNKJOopIpBFpNSMbIHCSRpRR5iakjTiyzLhchUUBwCgyKiweBv/7UsQbg8isVNoMPMjAAAA0gAAABEVFGmgqK////9bP/6XCykxBTUUzLjEwMKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq';\n\nfunction handleKeyEvent(event: KeyboardEvent): boolean {\n    if (\n        event.key === 'v' &&\n        event.ctrlKey &&\n        !event.shiftKey &&\n        !event.altKey &&\n        !event.metaKey\n    ) {\n        // this allows CTRL+V to be handled by the browser instead of sending\n        // a control character to the terminal.\n        return false;\n    }\n\n    if (event.key === 'F5' || event.key === 'F6') {\n        // allow global handler for these keys\n        return false;\n    }\n\n    return true;\n}\n\nfunction createXTerm(): { xterm: XTerm; fitAddon: FitAddon } {\n    const xterm = new XTerm({\n        cursorBlink: true,\n        cursorStyle: 'underline',\n        fontSize: 18,\n    });\n    const fitAddon = new FitAddon();\n    xterm.loadAddon(fitAddon);\n    xterm.attachCustomKeyEventHandler(handleKeyEvent);\n\n    return { xterm, fitAddon };\n}\n\ntype ContextMenuContentProps = { xterm: XTerm };\n\nconst ContextMenuContent: React.FunctionComponent<ContextMenuContentProps> = ({\n    xterm,\n}) => {\n    const i18n = useI18n();\n    const [hasSelection, setHasSelection] = useState(xterm.hasSelection());\n\n    useEffect(() => {\n        const subscription = xterm.onSelectionChange(() => {\n            setHasSelection(xterm.hasSelection());\n        });\n\n        return () => subscription.dispose();\n    }, [xterm, setHasSelection]);\n\n    return (\n        <Menu>\n            <MenuItem\n                onClick={(): void => {\n                    const selected = xterm.getSelection();\n                    if (selected) {\n                        navigator.clipboard.writeText(selected);\n                    }\n                }}\n                text={i18n.translate('copy')}\n                icon={<Duplicate />}\n                label={isMacOS() ? 'Cmd-C' : 'Ctrl-Shift-C'}\n                disabled={!hasSelection}\n            />\n            <MenuItem\n                onClick={async (): Promise<void> => {\n                    xterm.paste(await navigator.clipboard.readText());\n                }}\n                text={i18n.translate('paste')}\n                icon={<Clipboard />}\n                label={isMacOS() ? 'Cmd-V' : 'Ctrl-V'}\n            />\n            <MenuItem\n                onClick={() => xterm.selectAll()}\n                text={i18n.translate('selectAll')}\n                icon={<Blank />}\n            />\n            <MenuDivider />\n            <MenuItem\n                onClick={(): void => xterm.clear()}\n                text={i18n.translate('clear')}\n                icon={<Trash />}\n            />\n        </Menu>\n    );\n};\nconst Terminal: React.FunctionComponent = () => {\n    const { xterm, fitAddon } = useMemo(createXTerm, [createXTerm]);\n    const terminalRef = useRef<HTMLDivElement>(null);\n    const { isDarkMode } = useTernaryDarkMode();\n    const dispatch = useDispatch();\n    const terminalStream = useContext(TerminalContext);\n\n    // xterm.open() has to be called after terminalRef has been rendered\n    useEffect(() => {\n        // istanbul ignore if: should not happen ever\n        if (!terminalRef.current) {\n            console.error('Missing terminal reference');\n            return;\n        }\n\n        xterm.open(terminalRef.current);\n        fitAddon.fit();\n\n        // HACK: remove terminal from keyboard tab focus\n        // Since it steals tab key presses, there is no way\n        // to get out of it, so we use landmark navigation instead.\n        xterm.element?.removeAttribute('tabindex');\n        xterm.textarea?.setAttribute('tabindex', '-1');\n\n        return () => xterm.dispose();\n    }, [xterm, fitAddon]);\n\n    // wire up isDarkMode to terminal\n    useEffect(() => {\n        xterm.options.theme = {\n            background: isDarkMode ? 'black' : 'white',\n            foreground: isDarkMode ? 'white' : 'black',\n            cursor: isDarkMode ? 'white' : 'black',\n            // transparency is needed to work around https://github.com/xtermjs/xterm.js/issues/2808\n            selectionBackground: isDarkMode\n                ? 'rgb(81,81,81,0.5)'\n                : 'rgba(181,213,255,0.5)', // this should match editor theme\n        };\n    }, [isDarkMode, xterm]);\n\n    useEffect(() => {\n        const handleKeyDown = (e: KeyboardEvent): void => {\n            // implement CTRL+SHIFT+C keyboard shortcut for copying text from terminal\n            if (e.key === 'C' && e.ctrlKey && e.shiftKey && !e.altKey && !e.metaKey) {\n                // this would otherwise open up debug console in web browser\n                e.preventDefault();\n\n                if (\n                    document.hasFocus() &&\n                    document.activeElement ===\n                        terminalRef.current?.getElementsByClassName(\n                            'xterm-helper-textarea',\n                        )[0] &&\n                    xterm.hasSelection()\n                ) {\n                    navigator.clipboard.writeText(xterm.getSelection());\n                }\n            }\n        };\n\n        window.addEventListener('keydown', handleKeyDown);\n        return () => window.removeEventListener('keydown', handleKeyDown);\n    }, [terminalRef, xterm]);\n\n    // wire shared context to terminal output\n    useEffect(() => {\n        const subscription = terminalStream.dataSource.observable.subscribe({\n            next: (d) => xterm.write(d),\n        });\n\n        return () => subscription.unsubscribe();\n    }, [terminalStream, xterm]);\n\n    // wire terminal input to actions\n    useEffect(() => {\n        const onDataHandle = xterm.onData((d) => dispatch(receiveData(d)));\n        return () => onDataHandle.dispose();\n    }, [dispatch, xterm]);\n\n    useEffect(() => {\n        const listener = () => {\n            xterm.focus();\n        };\n\n        addEventListener('pb-terminal-focus', listener);\n\n        return () => removeEventListener('pb-terminal-focus', listener);\n    }, [xterm]);\n\n    // audio and visual notification of bell\n\n    const bellRef = useRef<HTMLAudioElement>(null);\n    const bellOverlayRef = useRef<HTMLDivElement>(null);\n    const bellTimeoutRef = useRef<ReturnType<typeof setTimeout>>();\n\n    useEffect(() => {\n        const audioElement = bellRef.current;\n        const overlayElement = bellOverlayRef.current;\n\n        if (process.env.NODE_ENV === 'test' || !audioElement || !overlayElement) {\n            return;\n        }\n\n        const subscription = xterm.onBell(() => {\n            if (bellTimeoutRef.current) {\n                clearTimeout(bellTimeoutRef.current);\n            }\n\n            audioElement.play();\n            overlayElement.classList.add('pb-bell');\n\n            bellTimeoutRef.current = setTimeout(() => {\n                overlayElement.classList.remove('pb-bell');\n            }, 150);\n        });\n\n        return () => subscription.dispose();\n    }, [xterm, bellRef, bellOverlayRef, bellTimeoutRef]);\n\n    return (\n        <ContextMenu\n            className=\"h-100\"\n            content={<ContextMenuContent xterm={xterm} />}\n            popoverProps={{ onClosed: () => xterm.focus() }}\n        >\n            <audio hidden preload=\"auto\" ref={bellRef}>\n                <source src={BELL_SOUND} />\n            </audio>\n            <div className=\"pb-terminal-bell-overlay\" ref={bellOverlayRef} />\n            <ResizeSensor targetRef={terminalRef} onResize={(): void => fitAddon.fit()}>\n                <div ref={terminalRef} className=\"h-100\" />\n            </ResizeSensor>\n        </ContextMenu>\n    );\n};\n\nexport default Terminal;\n","// SPDX-License-Identifier: MIT\n// Copyright (c) 2022 The Pybricks Authors\n\nimport { useI18n as useShopifyI18n } from '@shopify/react-i18n';\nimport type { TypedI18n } from '../i18n';\nimport type translations from './translations/en.json';\n\nexport function useI18n(): TypedI18n<typeof translations> {\n    // istanbul ignore next: babel-loader rewrites this line\n    const [i18n] = useShopifyI18n();\n    return i18n;\n}\n","// SPDX-License-Identifier: MIT\n// Copyright (c) 2020,2022 The Pybricks Authors\n\nimport { createAction } from '../actions';\n\nexport const sendData = createAction((data: string) => ({\n    type: 'terminal.action.sendData',\n    value: data,\n}));\n\nexport const receiveData = createAction((data: string) => ({\n    type: 'terminal.action.receiveData',\n    value: data,\n}));\n","var map = {\n\t\"./en.json\": 96609\n};\n\n\nfunction webpackAsyncContext(req) {\n\treturn webpackAsyncContextResolve(req).then(id => {\n\t\treturn __webpack_require__.t(id, 3 | 16);;\n\t});\n}\nfunction webpackAsyncContextResolve(req) {\n\treturn Promise.resolve(/* lazy-once context */).then(() => {\n\t\tif(!__webpack_require__.o(map, req)) {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t}\n\t\treturn map[req];\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.resolve = webpackAsyncContextResolve;\nwebpackAsyncContext.id = 86901;\nmodule.exports = webpackAsyncContext;"],"names":["handleKeyEvent","event","key","ctrlKey","shiftKey","altKey","metaKey","createXTerm","xterm","XTerm","cursorBlink","cursorStyle","fontSize","fitAddon","FitAddon","loadAddon","attachCustomKeyEventHandler","ContextMenuContent","_ref","i18n","useShopifyI18n","id","fallback","_en","translations","locale","indexOf","then","dict","default","useI18n","hasSelection","setHasSelection","useState","useEffect","subscription","onSelectionChange","dispose","_jsxs","Menu","children","_jsx","MenuItem","onClick","selected","getSelection","navigator","clipboard","writeText","text","translate","icon","Duplicate","label","isMacOS","disabled","async","paste","readText","Clipboard","selectAll","Blank","MenuDivider","clear","Trash","Terminal","useMemo","terminalRef","useRef","isDarkMode","useTernaryDarkMode","dispatch","useDispatch","terminalStream","useContext","TerminalContext","_xterm$element","_xterm$textarea","current","open","fit","element","removeAttribute","textarea","setAttribute","console","error","options","theme","background","foreground","cursor","selectionBackground","handleKeyDown","e","_terminalRef$current","preventDefault","document","hasFocus","activeElement","getElementsByClassName","window","addEventListener","removeEventListener","dataSource","observable","subscribe","next","d","write","unsubscribe","onDataHandle","onData","receiveData","listener","focus","bellRef","bellOverlayRef","bellTimeoutRef","audioElement","overlayElement","onBell","clearTimeout","play","classList","add","setTimeout","remove","ContextMenu","className","content","popoverProps","onClosed","hidden","preload","ref","src","ResizeSensor","targetRef","onResize","sendData","createAction","data","type","value","map","webpackAsyncContext","req","webpackAsyncContextResolve","__webpack_require__","t","Promise","resolve","o","Error","code","keys","Object","module","exports"],"sourceRoot":""}