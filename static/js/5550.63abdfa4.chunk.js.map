{"version":3,"file":"static/js/5550.63abdfa4.chunk.js","mappings":"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","sources":["pybricksMicropython/python-message.ts","editor/lib.ts","editor/sagas.ts"],"sourcesContent":["// SPDX-License-Identifier: MIT\n// Copyright (c) 2022 The Pybricks Authors\n\nimport { createAction } from '../actions';\n\n// NB: although we are using the same action creator as we do for redux, these\n// actions are not used by redux but rather are to sent between workers.\n\n/**\n * Message sent from main to work to request initialization of Pyodide.\n */\nexport const pythonMessageInit = createAction(() => ({\n    type: 'python.message.init',\n}));\n\n/**\n * Message sent from worker to main that indicates {@link pythonMessageInit}\n * succeeded.\n */\nexport const pythonMessageDidInit = createAction(() => ({\n    type: 'python.message.didInit',\n}));\n\n/**\n * Message sent from worker to main that indicates {@link pythonMessageInit}\n * failed.\n */\nexport const pythonMessageDidFailToInit = createAction((error: Error) => ({\n    type: 'python.message.didFailToInit',\n    error,\n}));\n\n/**\n * Message sent from main to worker to set the shared interrupt buffer.\n */\nexport const pythonMessageSetInterruptBuffer = createAction((buffer: Uint8Array) => ({\n    type: 'python.message.setInterruptBuffer',\n    buffer,\n}));\n\n/**\n * Message sent from main to worker to request code completion.\n */\nexport const pythonMessageComplete = createAction(\n    (code: string, lineNumber: number, column: number) => ({\n        type: 'python.message.complete',\n        code,\n        lineNumber,\n        column,\n    }),\n);\n\n/**\n * Message sent from worker to main that indicates {@link pythonMessageComplete}\n * succeeded.\n */\nexport const pythonMessageDidComplete = createAction((completionListJson: string) => ({\n    type: 'python.message.didComplete',\n    completionListJson,\n}));\n\n/**\n * Message sent from worker to main that indicates {@link pythonMessageComplete}\n * failed.\n */\nexport const pythonMessageDidFailToComplete = createAction((error: Error) => ({\n    type: 'python.message.didFailToComplete',\n    error,\n}));\n\n/**\n * Message sent from main to worker to request function signature.\n */\nexport const pythonMessageGetSignature = createAction(\n    (code: string, lineNumber: number, column: number) => ({\n        type: 'python.message.getSignature',\n        code,\n        lineNumber,\n        column,\n    }),\n);\n\n/**\n * Message sent from worker to main that indicates {@link pythonMessageGetSignature}\n * succeeded.\n */\nexport const pythonMessageDidGetSignature = createAction(\n    (signatureHelpJson: string) => ({\n        type: 'python.message.didGetSignature',\n        signatureHelpJson,\n    }),\n);\n\n/**\n * Message sent from worker to main that indicates {@link pythonMessageGetSignature}\n * failed.\n */\nexport const pythonMessageDidFailToGetSignature = createAction((error: Error) => ({\n    type: 'python.message.didFailToGetSignature',\n    error,\n}));\n\nexport const pythonMessageWriteUserFile = createAction(\n    (path: string, contents: string) => ({\n        type: 'python.message.writeUserFile',\n        path,\n        contents,\n    }),\n);\n\nexport const pythonMessageDeleteUserFile = createAction((path: string) => ({\n    type: 'python.message.deleteUserFile',\n    path,\n}));\n\nexport const pythonMessageDidMountUserFileSystem = createAction(() => ({\n    type: 'python.message.didMountUserFileSystem',\n}));\n","// SPDX-License-Identifier: MIT\n// Copyright (c) 2022 The Pybricks Authors\n\nimport dexieObservable from 'dexie-observable';\nimport type * as monaco from 'monaco-editor';\nimport { UUID } from '../fileStorage';\n\n// HACK: Using window.name to detect page reloads vs. tab duplication.\n// window.name will persist across page reloads but will be set back to ''\n// when a page is duplicated. This will avoid attempting to open files that\n// are already open in the page that was duplicated. sessionStorage is\n// duplicated when a window is duplicated, and we don't want to try to\n// duplicate open files since that would just cause errors since the files\n// are already open in another window.\n// istanbul ignore else\nif (window.name === '') {\n    window.name = dexieObservable.createUUID();\n}\n\n/**\n * Manages the active file history for an editor.\n *\n * The history is stored per-editor and per-browser window in a manner such\n * that it will persist across page reloads but be unique per window, including\n * duplicated windows.\n */\nexport class ActiveFileHistoryManager {\n    private readonly history = new Array<UUID>();\n    private readonly storageKey: string;\n\n    public constructor(id: string) {\n        this.storageKey = `editor.activeFileHistory.${window.name}.${id}`;\n    }\n\n    /**\n     * Gets the stored data.\n     *\n     * This may be nothing if storage fails or storage contains invalid data\n     * even though there is valid history in memory. It will also return data\n     * different from the in-memory list if storage has been modified externally\n     * or if no items have been pushed yet.\n     *\n     * It only makes sense to call this right after a new\n     * {@link ActiveFileHistoryManager} has been created to get the old values\n     * from the previous window reload.\n     */\n    public *getFromStorage(): IterableIterator<UUID> {\n        try {\n            const savedActiveFileHistory = JSON.parse(\n                sessionStorage.getItem(this.storageKey) || '[]',\n            );\n\n            // istanbul ignore if\n            if (!(savedActiveFileHistory instanceof Array)) {\n                throw new Error('savedActiveFileHistory is not an array');\n            }\n\n            // this should restore all previously open files in the same order\n            // the were last used (which may be different from the order in which\n            // they were originally opened)\n            for (const item of savedActiveFileHistory) {\n                // istanbul ignore if\n                if (typeof item !== 'string') {\n                    console.error(\n                        `ActiveFileHistoryManager: skipping non-string item: ${item}`,\n                    );\n                    continue;\n                }\n\n                yield <UUID>item;\n            }\n        } catch (err) {\n            // istanbul ignore next: not a critical error\n            console.error(`failed to get ${this.storageKey}: ${err}`);\n        }\n    }\n\n    /**\n     * Pushes a file on top of the stack. If the file was already in the stack,\n     * it is moved to the top.\n     * @param uuid: The file UUID.\n     */\n    public push(uuid: UUID): void {\n        const index = this.history.indexOf(uuid);\n\n        if (index >= 0) {\n            this.history.splice(index, 1);\n        }\n\n        this.history.push(uuid);\n\n        try {\n            sessionStorage.setItem(this.storageKey, JSON.stringify(this.history));\n        } catch (err) {\n            // istanbul ignore next: not a critical failure\n            console.error(`failed to store ${this.storageKey}: ${err}`);\n        }\n    }\n\n    /**\n     * Pops an item from the list.\n     *\n     * The item is not necessarily the (top) active item.\n     * @param uuid The UUID of the file to remove.\n     * @returns The new active file if {@link uuid} was the active file or\n     * undefined if {@link uuid} was not the active file (or not in the\n     * the history at all.)\n     */\n    public pop(uuid: UUID): UUID | undefined {\n        const index = this.history.indexOf(uuid);\n\n        if (index < 0) {\n            // the file is not in history\n            return undefined;\n        }\n\n        const wasActiveFile = this.history.at(-1) === uuid;\n        this.history.splice(index, 1);\n\n        try {\n            sessionStorage.setItem(this.storageKey, JSON.stringify(this.history));\n        } catch (err) {\n            // istanbul ignore next: not a critical failure\n            console.error(`failed to store ${this.storageKey}: ${err}`);\n        }\n\n        return wasActiveFile ? this.history.at(-1) : undefined;\n    }\n}\n\nexport type OpenFileInfo = {\n    /** The model. */\n    readonly model: monaco.editor.ITextModel;\n    /** The view state. */\n    viewState: monaco.editor.ICodeEditorViewState | null;\n};\n\nexport class OpenFileManager {\n    private readonly map: Map<UUID, OpenFileInfo> = new Map();\n\n    /**\n     * Adds a new file to the list of open files.\n     * @param uuid The file UUID.\n     * @param model The text editor model.\n     * @param viewState The text editor view state.\n     */\n    public add(\n        uuid: UUID,\n        model: monaco.editor.ITextModel,\n        viewState: monaco.editor.ICodeEditorViewState | null,\n    ): void {\n        // istanbul ignore if: bug if hit\n        if (this.map.has(uuid)) {\n            throw new Error(`bug: key '${uuid}' already exists in the map`);\n        }\n\n        this.map.set(uuid, { model, viewState });\n    }\n\n    /**\n     * Removes a file from the list of open files.\n     * @param uuid The file UUID.\n     */\n    public remove(uuid: UUID): void {\n        this.map.delete(uuid);\n    }\n\n    /**\n     * Tests if {@link uuid} is in the list of open files.\n     * @param uuid The file UUID.\n     * @returns `true` if the file is already open, otherwise `false`.\n     */\n    public has(uuid: UUID): boolean {\n        return this.map.has(uuid);\n    }\n\n    /**\n     * Gets the info for {@link uuid}.\n     * @param uuid The file UUID.\n     * @returns The file info or `undefined` if the file is not in the list.\n     */\n    public get(uuid: UUID): OpenFileInfo | undefined {\n        return this.map.get(uuid);\n    }\n\n    /**\n     * Modifies the view state of {@link uuid} if it is present, otherwise\n     * does nothing.\n     * @param uuid The lookup key.\n     * @param viewState The new view state.\n     */\n    public updateViewState(\n        uuid: UUID,\n        viewState: monaco.editor.ICodeEditorViewState | null,\n    ): void {\n        const info = this.map.get(uuid);\n\n        if (!info) {\n            return;\n        }\n\n        info.viewState = viewState;\n    }\n}\n","// SPDX-License-Identifier: MIT\n// Copyright (c) 2022-2023 The Pybricks Authors\n\nimport type { DatabaseChangeType, IDatabaseChange } from 'dexie-observable/api';\nimport * as monaco from 'monaco-editor';\nimport { EventChannel, Task, buffers, eventChannel } from 'redux-saga';\nimport {\n    call,\n    cancelled,\n    delay,\n    fork,\n    getContext,\n    put,\n    race,\n    select,\n    take,\n    takeEvery,\n} from 'typed-redux-saga/macro';\nimport { alertsShowAlert } from '../alerts/actions';\nimport { FileStorageDb, UUID } from '../fileStorage';\nimport {\n    fileStorageDidFailToLoadTextFile,\n    fileStorageDidFailToStoreTextFileViewState,\n    fileStorageDidInitialize,\n    fileStorageDidLoadTextFile,\n    fileStorageDidStoreTextFileViewState,\n    fileStorageLoadTextFile,\n    fileStorageStoreTextFileValue,\n    fileStorageStoreTextFileViewState,\n} from '../fileStorage/actions';\nimport {\n    pythonMessageComplete,\n    pythonMessageDeleteUserFile,\n    pythonMessageDidComplete,\n    pythonMessageDidFailToComplete,\n    pythonMessageDidFailToGetSignature,\n    pythonMessageDidFailToInit,\n    pythonMessageDidGetSignature,\n    pythonMessageDidInit,\n    pythonMessageDidMountUserFileSystem,\n    pythonMessageGetSignature,\n    pythonMessageInit,\n    pythonMessageSetInterruptBuffer,\n    pythonMessageWriteUserFile,\n} from '../pybricksMicropython/python-message';\nimport { RootState } from '../reducers';\nimport { acquireLock, defined, ensureError } from '../utils';\nimport { createCountFunc } from '../utils/iter';\nimport {\n    editorActivateFile,\n    editorCloseFile,\n    editorCompletionDidFailToInit,\n    editorCompletionDidInit,\n    editorCompletionInit,\n    editorDidActivateFile,\n    editorDidCloseFile,\n    editorDidCreate,\n    editorDidFailToActivateFile,\n    editorDidFailToOpenFile,\n    editorDidOpenFile,\n    editorGetValueRequest,\n    editorGetValueResponse,\n    editorGoto,\n    editorOpenFile,\n    editorReplaceFile,\n} from './actions';\nimport { EditorError } from './error';\nimport { ActiveFileHistoryManager, OpenFileManager } from './lib';\nimport { pybricksMicroPythonId } from './pybricksMicroPython';\n\nfunction* handleEditorGetValueRequest(\n    editor: monaco.editor.ICodeEditor,\n    action: ReturnType<typeof editorGetValueRequest>,\n): Generator {\n    yield* put(editorGetValueResponse(action.id, editor.getValue()));\n}\n\n/** Handle changes to the model. */\nfunction* handleModelDidChange(\n    ms: number,\n    chan: EventChannel<monaco.editor.IModelContentChangedEvent>,\n    model: monaco.editor.ITextModel,\n): Generator {\n    for (;;) {\n        yield* take(chan);\n        const value = model.getValue();\n        // when the model changes, save it to storage.\n        yield* put(fileStorageStoreTextFileValue(model.uri.path as UUID, value));\n        // failures are ignored\n\n        // throttle the writes so we don't do it too often while user is typing quickly\n        yield* delay(ms);\n    }\n}\n\nfunction handleReplaceFile(\n    editor: monaco.editor.ICodeEditor,\n    model: monaco.editor.ITextModel,\n    action: ReturnType<typeof editorReplaceFile>,\n) {\n    // model might not be open in editor, but it doesn't hurt to do this in the\n    // open editor\n    editor.pushUndoStop();\n    // pushEditOperations says it expects a cursorComputer, but doesn't seem to need one.\n    model.pushEditOperations(\n        [],\n        [\n            {\n                range: model.getFullModelRange(),\n                text: action.value,\n            },\n        ],\n        undefined as unknown as monaco.editor.ICursorStateComputer,\n    );\n    editor.pushUndoStop();\n}\n\nfunction* handleEditorOpenFile(\n    editor: monaco.editor.ICodeEditor,\n    openFiles: OpenFileManager,\n    action: ReturnType<typeof editorOpenFile>,\n): Generator {\n    let closeRequested = false;\n\n    try {\n        const defer: Array<() => void | Promise<void>> = [];\n\n        try {\n            const modelUri = monaco.Uri.from({\n                scheme: 'pybricksCode',\n                path: action.uuid,\n            });\n\n            const releaseLock = yield* call(() =>\n                acquireLock(`pybricks.editor+${modelUri}`),\n            );\n\n            if (!releaseLock) {\n                throw new EditorError(\n                    'FileInUse',\n                    'the file is already open in another editor',\n                );\n            }\n\n            defer.push(releaseLock);\n\n            yield* put(fileStorageLoadTextFile(action.uuid));\n\n            const { didLoad, didFailToLoad } = yield* race({\n                didLoad: take(\n                    fileStorageDidLoadTextFile.when((a) => a.uuid === action.uuid),\n                ),\n                didFailToLoad: take(\n                    fileStorageDidFailToLoadTextFile.when(\n                        (a) => a.uuid === action.uuid,\n                    ),\n                ),\n            });\n\n            if (didFailToLoad) {\n                throw didFailToLoad.error;\n            }\n\n            defined(didLoad);\n\n            const model = monaco.editor.createModel(\n                didLoad.value,\n                pybricksMicroPythonId,\n                modelUri,\n            );\n            defer.push(() => model.dispose());\n\n            // NB: the throttle effect doesn't work with event channels, so we\n            // emulate the effect by using a buffer with size of one here...\n            const didChangeModelChan =\n                eventChannel<monaco.editor.IModelContentChangedEvent>((emit) => {\n                    const subscription = model.onDidChangeContent((e) => emit(e));\n                    return () => subscription.dispose();\n                }, buffers.sliding(1));\n\n            defer.push(() => didChangeModelChan.close());\n\n            // ... and then fork to function that looks like\n            // https://github.com/redux-saga/redux-saga/issues/620#issuecomment-259161095\n            yield* fork(handleModelDidChange, 1000, didChangeModelChan, model);\n\n            const replaceFileTask: Task = yield* takeEvery(\n                editorReplaceFile.when((a) => a.uuid === action.uuid),\n                handleReplaceFile,\n                editor,\n                model,\n            );\n            defer.push(() => replaceFileTask.cancel());\n\n            openFiles.add(action.uuid, model, didLoad.viewState);\n            defer.push(() => openFiles.remove(action.uuid));\n\n            yield* put(editorDidOpenFile(action.uuid));\n\n            yield* take(editorCloseFile.when((a) => a.uuid === action.uuid));\n\n            closeRequested = true;\n\n            // if the file is the currently active file, the view state will\n            // be out of sync, so we need to update it here before saving to\n            // storage\n            if (editor.getModel() === model) {\n                openFiles.updateViewState(action.uuid, editor.saveViewState());\n            }\n\n            // save the file contents on close since the change watcher is\n            // throttled and the latest changes may not have been saved yet\n            yield* put(fileStorageStoreTextFileValue(action.uuid, model.getValue()));\n        } finally {\n            for (const callback of defer.reverse()) {\n                callback();\n            }\n\n            // only send the did close action if the corresponding action requested it\n            if (closeRequested) {\n                yield* put(editorDidCloseFile(action.uuid));\n            }\n        }\n    } catch (err) {\n        yield* put(editorDidFailToOpenFile(action.uuid, ensureError(err)));\n    }\n}\n\nfunction* handleEditorActivateFile(\n    editor: monaco.editor.ICodeEditor,\n    openFiles: OpenFileManager,\n    activeFileHistory: ActiveFileHistoryManager,\n    action: ReturnType<typeof editorActivateFile>,\n): Generator {\n    try {\n        if (!openFiles.has(action.uuid)) {\n            yield* put(editorOpenFile(action.uuid));\n\n            const { didFailToOpen } = yield* race({\n                didOpen: take(editorDidOpenFile.when((a) => a.uuid === action.uuid)),\n                didFailToOpen: take(\n                    editorDidFailToOpenFile.when((a) => a.uuid === action.uuid),\n                ),\n            });\n\n            if (didFailToOpen) {\n                throw didFailToOpen.error;\n            }\n        }\n\n        const file = openFiles.get(action.uuid);\n\n        // istanbul ignore if: this should always be available after editorDidOpenFile\n        if (file === undefined) {\n            throw new Error('bug: could not get file from openFiles');\n        }\n\n        // save the current view state for later activation\n        const oldModel = editor.getModel();\n\n        if (oldModel) {\n            openFiles.updateViewState(\n                oldModel.uri.path as UUID,\n                editor.saveViewState(),\n            );\n        }\n\n        editor.pushUndoStop();\n        editor.setModel(file.model);\n        editor.restoreViewState(file.viewState);\n        editor.pushUndoStop();\n        activeFileHistory.push(action.uuid);\n\n        editor.focus();\n\n        yield* put(editorDidActivateFile(action.uuid));\n    } catch (err) {\n        yield* put(editorDidFailToActivateFile(action.uuid, ensureError(err)));\n    }\n}\n\nfunction* handleEditorGoto(\n    editor: monaco.editor.ICodeEditor,\n    action: ReturnType<typeof editorGoto>,\n): Generator {\n    yield* put(editorActivateFile(action.uuid));\n\n    const { didActivate, didFailToActivate } = yield* race({\n        didActivate: take(editorDidActivateFile.when((a) => a.uuid === action.uuid)),\n        didFailToActivate: take(\n            editorDidFailToActivateFile.when((a) => a.uuid === action.uuid),\n        ),\n    });\n\n    if (didFailToActivate) {\n        if (\n            didFailToActivate.error instanceof EditorError &&\n            didFailToActivate.error.name === 'FileInUse'\n        ) {\n            const db = yield* getContext<FileStorageDb>('fileStorage');\n\n            const metadata = yield* call(() => db.metadata.get(action.uuid));\n\n            yield* put(\n                alertsShowAlert('explorer', 'fileInUse', {\n                    fileName: metadata?.path ?? '<unknown>',\n                }),\n            );\n        } else {\n            yield* put(\n                alertsShowAlert('alerts', 'unexpectedError', {\n                    error: didFailToActivate.error,\n                }),\n            );\n        }\n\n        return;\n    }\n\n    defined(didActivate);\n\n    editor.revealLineInCenterIfOutsideViewport(action.line);\n    editor.setSelection({\n        startColumn: 1,\n        startLineNumber: action.line,\n        endColumn: Infinity,\n        endLineNumber: action.line,\n    });\n}\n\nfunction* handleEditorDidCloseFile(\n    activeFileHistory: ActiveFileHistoryManager,\n    action: ReturnType<typeof editorDidCloseFile>,\n): Generator {\n    // handleEditorOpenFile handles most of the closing of files.\n    // Here we only need to handle removing the closed file from the active\n    // file history.\n\n    const newActiveFile = activeFileHistory.pop(action.uuid);\n\n    // if the closed file was the active file, we need to activate a new file\n    // otherwise there will be no active file\n    if (newActiveFile) {\n        yield* put(editorActivateFile(newActiveFile));\n    }\n}\n\n/**\n * Monitors the editor for any possible view state change and stores the state\n * with the associated file when the state changes.\n */\nfunction* monitorViewState(editor: monaco.editor.ICodeEditor): Generator {\n    const ch = eventChannel<\n        | monaco.editor.ICursorPositionChangedEvent\n        | monaco.editor.ICursorSelectionChangedEvent\n        | monaco.IScrollEvent\n    >((emit) => {\n        const subscriptions = new Array<monaco.IDisposable>();\n\n        // there isn't a single view state change event, so this should be\n        // all of the events that can trigger a state change\n        subscriptions.push(editor.onDidChangeCursorPosition(emit));\n        subscriptions.push(editor.onDidChangeCursorSelection(emit));\n        subscriptions.push(editor.onDidScrollChange(emit));\n\n        return () => subscriptions.forEach((s) => s.dispose());\n    }, buffers.sliding(1));\n\n    try {\n        for (;;) {\n            yield* take(ch);\n\n            const model = editor.getModel();\n\n            if (!model) {\n                continue;\n            }\n\n            const uuid = model.uri.path as UUID;\n\n            yield* put(fileStorageStoreTextFileViewState(uuid, editor.saveViewState()));\n\n            yield* race({\n                didStore: take(\n                    fileStorageDidStoreTextFileViewState.when((a) => a.uuid === uuid),\n                ),\n                didFailToStore: take(\n                    fileStorageDidFailToStoreTextFileViewState.when(\n                        (a) => a.uuid === uuid,\n                    ),\n                ),\n            });\n        }\n    } finally {\n        ch.close();\n    }\n}\n\nfunction* handleDidCreateEditor(editor: monaco.editor.ICodeEditor): Generator {\n    // first, we need to be sure that file storage is ready\n\n    const isFileStorageInitialized = yield* select(\n        (s: RootState) => s.fileStorage.isInitialized,\n    );\n\n    if (!isFileStorageInitialized) {\n        yield* take(fileStorageDidInitialize);\n    }\n\n    const openFiles = new OpenFileManager();\n    const activeFileHistory = new ActiveFileHistoryManager(editor.getId());\n\n    yield* takeEvery(editorGetValueRequest, handleEditorGetValueRequest, editor);\n    yield* takeEvery(editorOpenFile, handleEditorOpenFile, editor, openFiles);\n    yield* takeEvery(\n        editorActivateFile,\n        handleEditorActivateFile,\n        editor,\n        openFiles,\n        activeFileHistory,\n    );\n    yield* takeEvery(editorGoto, handleEditorGoto, editor);\n    yield* takeEvery(editorDidCloseFile, handleEditorDidCloseFile, activeFileHistory);\n    yield* fork(monitorViewState, editor);\n\n    yield* put(editorDidCreate());\n\n    // this should restore all previously open files in the same order\n    // the were last used (which may be different from the order in which\n    // they were originally opened)\n    for (const item of activeFileHistory.getFromStorage()) {\n        yield* put(editorActivateFile(item));\n\n        yield* race({\n            didActivate: take(editorDidActivateFile.when((a) => a.uuid === item)),\n            didFailToActivate: take(\n                editorDidFailToActivateFile.when((a) => a.uuid === item),\n            ),\n        });\n\n        // Errors are ignored here since we don't want to pester the user with\n        // error messages.\n    }\n}\n\nfunction* monitorEditors(): Generator {\n    const ch = eventChannel<monaco.editor.ICodeEditor>((emit) => {\n        const subscription = monaco.editor.onDidCreateEditor(emit);\n        return () => subscription.dispose();\n    });\n\n    try {\n        yield* takeEvery(ch, handleDidCreateEditor);\n\n        yield* take('__never__');\n    } finally {\n        ch.close();\n    }\n}\n\n// HACK: dexie-observable exports const enum, so we have to redefine values\nconst DatabaseChangeTypeCreate: DatabaseChangeType.Create = 1;\nconst DatabaseChangeTypeUpdate: DatabaseChangeType.Update = 2;\nconst DatabaseChangeTypeDelete: DatabaseChangeType.Delete = 3;\n\n/**\n * Mirrors the Dexie-based file system to the Emscripten file system in the\n * Python Web Worker.\n *\n * @param worker The web worker.\n */\nfunction* mirrorFileSystem(worker: Worker): Generator {\n    // wait for file storage to become ready if it isn't already\n    if (!(yield* select((s: RootState) => s.fileStorage.isInitialized))) {\n        yield take(fileStorageDidInitialize);\n    }\n\n    const db = yield* getContext<FileStorageDb>('fileStorage');\n\n    // subscribe to future changes\n    const dbChangedChan = eventChannel<IDatabaseChange[]>((emit) => {\n        db.on('changes').subscribe(emit);\n        return () => db.on('changes').unsubscribe(emit);\n    });\n\n    // copy all existing files\n    yield* call(() =>\n        db.transaction('r', db._contents, () =>\n            db._contents.each((f) =>\n                worker.postMessage(pythonMessageWriteUserFile(f.path, f.contents)),\n            ),\n        ),\n    );\n\n    // handle future changes\n    try {\n        for (;;) {\n            const changes = yield* take(dbChangedChan);\n\n            for (const c of changes) {\n                // only interested in metadata table changes\n                if (c.table !== db.metadata.name) {\n                    continue;\n                }\n\n                switch (c.type) {\n                    case DatabaseChangeTypeCreate:\n                    case DatabaseChangeTypeUpdate:\n                        // only send message if file was created or contents\n                        // changed - ignore other metadata changes\n                        if (\n                            c.type === DatabaseChangeTypeUpdate &&\n                            c.obj.sha256 === c.oldObj.sha256\n                        ) {\n                            break;\n                        }\n\n                        yield* call(() =>\n                            db.transaction('r', db._contents, async () => {\n                                const file = await db._contents.get(c.obj.path);\n\n                                // istanbul ignore if: programmer error if we hit this\n                                if (!file) {\n                                    console.error(\n                                        `could not find file '${c.obj.path}'`,\n                                    );\n                                    return;\n                                }\n\n                                worker.postMessage(\n                                    pythonMessageWriteUserFile(\n                                        file.path,\n                                        file.contents,\n                                    ),\n                                );\n                            }),\n                        );\n\n                        break;\n\n                    case DatabaseChangeTypeDelete:\n                        worker.postMessage(pythonMessageDeleteUserFile(c.oldObj.path));\n                        break;\n                }\n            }\n        }\n    } finally {\n        dbChangedChan.close();\n    }\n}\n\n/**\n * Runs a web worker with Pyodide so that we can use Jedi for intellisense.\n */\nfunction* runJedi(): Generator {\n    // TODO: web workers are not implemented in test environment\n    if (process.env.NODE_ENV === 'test') {\n        return;\n    }\n\n    const defer = new Array<() => void>();\n\n    try {\n        console.debug('creating code completion worker');\n\n        // start the web worker and set up communication channels\n\n        const worker = new Worker(\n            new URL('../pybricksMicropython/python-worker.ts', import.meta.url),\n        );\n\n        defer.push(() => worker.terminate());\n\n        const messageChannel = eventChannel<MessageEvent>((emit) => {\n            worker.addEventListener('message', emit);\n\n            return () => worker.removeEventListener('message', emit);\n        }, buffers.expanding());\n\n        defer.push(() => messageChannel.close());\n\n        const errorChannel = eventChannel<ErrorEvent>((emit) => {\n            worker.addEventListener('error', emit);\n\n            return () => worker.removeEventListener('error', emit);\n        }, buffers.expanding());\n\n        defer.push(() => errorChannel.close());\n\n        // wait for the Python runtime to start and get in a ready state\n\n        worker.postMessage(pythonMessageInit());\n        yield* put(editorCompletionInit());\n\n        for (;;) {\n            const { messageEvent, errorEvent } = yield* race({\n                messageEvent: take(messageChannel),\n                errorEvent: take(errorChannel),\n            });\n\n            if (errorEvent) {\n                yield* put(editorCompletionDidFailToInit());\n                throw errorEvent.error;\n            }\n\n            defined(messageEvent);\n\n            if (pythonMessageDidMountUserFileSystem.matches(messageEvent.data)) {\n                yield* fork(mirrorFileSystem, worker);\n                continue;\n            }\n\n            if (pythonMessageDidFailToInit.matches(messageEvent.data)) {\n                yield* put(editorCompletionDidFailToInit());\n                throw messageEvent.data.error;\n            }\n\n            if (pythonMessageDidInit.matches(messageEvent.data)) {\n                break;\n            }\n        }\n\n        console.debug('code completion engine is ready');\n        yield* put(editorCompletionDidInit());\n\n        // configure interrupts\n        // https://pyodide.org/en/stable/usage/keyboard-interrupts.html\n\n        // HACK: Using WebAssembly.Memory instead of SharedArrayBuffer to avoid exception.\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/Planned_changes#api_changes\n        const interrupt = new Uint8Array(\n            new WebAssembly.Memory({ initial: 1, maximum: 1, shared: true }).buffer,\n        );\n\n        const setInterrupt = () => {\n            interrupt[0] = 2; //2 === SIGINT\n        };\n\n        const clearInterrupt = () => {\n            interrupt[0] = 0;\n        };\n\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer#security_requirements\n        if (crossOriginIsolated) {\n            worker.postMessage(pythonMessageSetInterruptBuffer(interrupt));\n        } else {\n            console.warn(\n                'required headers missing for SharedArrayBuffer, cancellation will not work',\n            );\n        }\n\n        // register intellisense hooks with editor\n\n        const nextId = createCountFunc();\n\n        const completionItemProviderChan = eventChannel<{\n            model: monaco.editor.ITextModel;\n            position: monaco.Position;\n            context: monaco.languages.CompletionContext;\n            token: monaco.CancellationToken;\n            resolve: (value: monaco.languages.CompletionList | null) => void;\n        }>((emit) => {\n            const subscription = monaco.languages.registerCompletionItemProvider(\n                pybricksMicroPythonId,\n                {\n                    triggerCharacters: ['.'],\n                    provideCompletionItems(\n                        model,\n                        position,\n                        context,\n                        token,\n                    ): Promise<monaco.languages.CompletionList | null> {\n                        return new Promise((resolve) => {\n                            emit({ model, position, context, token, resolve });\n                        });\n                    },\n                },\n            );\n\n            return () => subscription.dispose();\n        }, buffers.expanding());\n\n        defer.push(() => completionItemProviderChan.close());\n\n        const signatureProviderChan = eventChannel<{\n            model: monaco.editor.ITextModel;\n            position: monaco.Position;\n            token: monaco.CancellationToken;\n            context: monaco.languages.SignatureHelpContext;\n            resolve: (value: monaco.languages.SignatureHelpResult | null) => void;\n        }>((emit) => {\n            const subscription = monaco.languages.registerSignatureHelpProvider(\n                pybricksMicroPythonId,\n                {\n                    signatureHelpTriggerCharacters: ['(', ','],\n                    signatureHelpRetriggerCharacters: [')'],\n                    provideSignatureHelp(model, position, token, context) {\n                        return new Promise((resolve) => {\n                            emit({ model, position, token, context, resolve });\n                        });\n                    },\n                },\n            );\n\n            return () => subscription.dispose();\n        }, buffers.expanding());\n\n        defer.push(() => signatureProviderChan.close());\n\n        // Serialize requests from editor. Due to the way cancellation works, we\n        // can only have one pending message from the web worker at a time.\n\n        for (;;) {\n            const { complete, getSignature } = yield* race({\n                complete: take(completionItemProviderChan),\n                getSignature: take(signatureProviderChan),\n            });\n\n            if (complete) {\n                // for debugging\n                const id = nextId();\n\n                console.debug(`${id}: requested completion item`);\n\n                const subscription = complete.token.onCancellationRequested(() => {\n                    console.debug(`${id}: requested cancelation`);\n                    setInterrupt();\n                });\n\n                try {\n                    clearInterrupt();\n\n                    worker.postMessage(\n                        pythonMessageComplete(\n                            complete.model.getValue(),\n                            complete.position.lineNumber,\n                            complete.position.column,\n                        ),\n                    );\n\n                    for (;;) {\n                        const msg = yield* take(messageChannel);\n\n                        if (pythonMessageDidFailToComplete.matches(msg.data)) {\n                            if (\n                                msg.data.error instanceof DOMException &&\n                                msg.data.error.name === 'AbortError'\n                            ) {\n                                console.log(`${id} canceled`);\n                            } else {\n                                console.error(msg.data.error);\n                            }\n                            complete.resolve(null);\n                            break;\n                        }\n\n                        if (pythonMessageDidComplete.matches(msg.data)) {\n                            const list: monaco.languages.CompletionItem[] = JSON.parse(\n                                msg.data.completionListJson,\n                            );\n\n                            // maintain sort order from jedi\n                            for (const [i, item] of list.entries()) {\n                                item.sortText = String(i).padStart(5, '0');\n                            }\n\n                            console.debug(list);\n                            complete.resolve({ suggestions: list });\n                            console.debug(`${id}: resolved: ${msg.data.type}`);\n                            break;\n                        }\n                    }\n                } finally {\n                    subscription.dispose();\n                }\n            } else if (getSignature) {\n                // for debugging\n                const id = nextId();\n\n                console.debug(`${id}: requested signatures`);\n\n                const subscription = getSignature.token.onCancellationRequested(() => {\n                    console.debug(`${id}: requested cancelation`);\n                    setInterrupt();\n                });\n\n                try {\n                    clearInterrupt();\n\n                    worker.postMessage(\n                        pythonMessageGetSignature(\n                            getSignature.model.getValue(),\n                            getSignature.position.lineNumber,\n                            getSignature.position.column,\n                        ),\n                    );\n\n                    for (;;) {\n                        const msg = yield* take(messageChannel);\n\n                        if (pythonMessageDidFailToGetSignature.matches(msg.data)) {\n                            if (\n                                msg.data.error instanceof DOMException &&\n                                msg.data.error.name === 'AbortError'\n                            ) {\n                                console.log(`${id} canceled`);\n                            } else {\n                                console.error(msg.data.error);\n                            }\n                            getSignature.resolve(null);\n                            break;\n                        }\n\n                        if (pythonMessageDidGetSignature.matches(msg.data)) {\n                            const signatures = JSON.parse(msg.data.signatureHelpJson);\n                            console.debug(signatures);\n                            getSignature.resolve({\n                                value: signatures,\n                                dispose: () => undefined,\n                            });\n                            console.debug(`${id}: resolved: ${msg.data.type}`);\n                            break;\n                        }\n                    }\n                } finally {\n                    subscription.dispose();\n                }\n            }\n        }\n    } catch (err) {\n        const isCancelled = yield* cancelled();\n\n        if (!isCancelled) {\n            console.error(err);\n        }\n    } finally {\n        defer.forEach((item) => item());\n    }\n}\n\nexport default function* (): Generator {\n    yield* fork(monitorEditors);\n    yield* fork(runJedi);\n}\n"],"names":["pythonMessageInit","createAction","type","pythonMessageDidInit","pythonMessageDidFailToInit","error","pythonMessageSetInterruptBuffer","buffer","pythonMessageComplete","code","lineNumber","column","pythonMessageDidComplete","completionListJson","pythonMessageDidFailToComplete","pythonMessageGetSignature","pythonMessageDidGetSignature","signatureHelpJson","pythonMessageDidFailToGetSignature","pythonMessageWriteUserFile","path","contents","pythonMessageDeleteUserFile","pythonMessageDidMountUserFileSystem","window","name","dexieObservable","createUUID","ActiveFileHistoryManager","constructor","id","history","Array","storageKey","this","getFromStorage","savedActiveFileHistory","JSON","parse","sessionStorage","getItem","Error","item","console","err","push","uuid","index","indexOf","splice","setItem","stringify","pop","wasActiveFile","at","undefined","OpenFileManager","map","Map","add","model","viewState","has","set","remove","delete","get","updateViewState","info","handleEditorGetValueRequest","editor","action","put","editorGetValueResponse","getValue","handleModelDidChange","ms","chan","take","value","fileStorageStoreTextFileValue","uri","delay","handleReplaceFile","pushUndoStop","pushEditOperations","range","getFullModelRange","text","handleEditorOpenFile","openFiles","closeRequested","defer","modelUri","monaco","from","scheme","releaseLock","call","acquireLock","EditorError","fileStorageLoadTextFile","didLoad","didFailToLoad","race","fileStorageDidLoadTextFile","when","a","fileStorageDidFailToLoadTextFile","defined","createModel","pybricksMicroPythonId","dispose","didChangeModelChan","eventChannel","emit","subscription","onDidChangeContent","e","buffers","sliding","close","fork","replaceFileTask","takeEvery","editorReplaceFile","cancel","editorDidOpenFile","editorCloseFile","getModel","saveViewState","callback","reverse","editorDidCloseFile","editorDidFailToOpenFile","ensureError","handleEditorActivateFile","activeFileHistory","editorOpenFile","didFailToOpen","didOpen","file","oldModel","setModel","restoreViewState","focus","editorDidActivateFile","editorDidFailToActivateFile","handleEditorGoto","editorActivateFile","didActivate","didFailToActivate","_metadata$path","db","getContext","metadata","alertsShowAlert","fileName","revealLineInCenterIfOutsideViewport","line","setSelection","startColumn","startLineNumber","endColumn","Infinity","endLineNumber","handleEditorDidCloseFile","newActiveFile","monitorViewState","ch","subscriptions","onDidChangeCursorPosition","onDidChangeCursorSelection","onDidScrollChange","forEach","s","fileStorageStoreTextFileViewState","didStore","fileStorageDidStoreTextFileViewState","didFailToStore","fileStorageDidFailToStoreTextFileViewState","handleDidCreateEditor","select","fileStorage","isInitialized","fileStorageDidInitialize","getId","editorGetValueRequest","editorGoto","editorDidCreate","monitorEditors","onDidCreateEditor","DatabaseChangeTypeCreate","DatabaseChangeTypeUpdate","DatabaseChangeTypeDelete","mirrorFileSystem","worker","dbChangedChan","on","subscribe","unsubscribe","transaction","_contents","each","f","postMessage","changes","c","table","obj","sha256","oldObj","async","runJedi","debug","Worker","URL","terminate","messageChannel","addEventListener","removeEventListener","expanding","errorChannel","editorCompletionInit","messageEvent","errorEvent","editorCompletionDidFailToInit","matches","data","editorCompletionDidInit","interrupt","Uint8Array","WebAssembly","Memory","initial","maximum","shared","setInterrupt","clearInterrupt","crossOriginIsolated","warn","nextId","createCountFunc","completionItemProviderChan","registerCompletionItemProvider","triggerCharacters","provideCompletionItems","position","context","token","Promise","resolve","signatureProviderChan","registerSignatureHelpProvider","signatureHelpTriggerCharacters","signatureHelpRetriggerCharacters","provideSignatureHelp","complete","getSignature","onCancellationRequested","msg","DOMException","log","list","i","entries","sortText","String","padStart","suggestions","signatures","cancelled"],"sourceRoot":""}